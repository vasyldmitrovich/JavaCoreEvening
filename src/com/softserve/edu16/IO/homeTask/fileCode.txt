package com.zhenyok;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.stream.IntStream;

import static com.zhenyok.ThreadColor.*;


public class Main extends Exception {
    @Serial
    private static final long serialVersionUID = 1L;

    public Main(String message) {
        super(message);
    }

    public static void asd(int a, int b, CarInt car) {
        System.out.println(car.mult(a, b));

    }

    public static void maino(String[] args) {
        Supplier<Car> personSupplier = Car::new;
        Car car1 = new Car();
        System.out.println(car1);
        List<String> list = new ArrayList<>();
        list.add("ASdasdd");
        list.add("asdasd");
        list.removeIf(s -> s.contains("A"));
        System.out.println(list);
        Function<String, Integer> stringToInt = Integer::valueOf;

    }

    public static void mains(String[] args) {
        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
        System.out.println("Print all numbers:");
        eval(list, n -> true);
        System.out.println("Print even numbers:");
        eval(list, n -> n % 2 == 0);
        System.out.println("Print numbers greater than 3:");
        eval(list, n -> n > 3);
        Set<Integer> set = new HashSet<>();
        set.add(1);
        set.add(2);
        set.add(3);
        Set<Integer> set1 = new HashSet<>();
        set1.add(1);
        set1.add(2);

        set.retainAll(set1);

        System.out.println(set);
        Map<String, String> lisst = new HashMap<>();
        Collections.unmodifiableList(list);

    }

    public static void mainIO(String[] args) throws IOException { //IO
        int bufferSizeOptional = 100;
        Path of = Path.of("Text.txt");

//BYTE
        FileInputStream fileInputStream = new FileInputStream("Text.txt");
        fileInputStream.read();
        FileOutputStream fileOutputStream = new FileOutputStream("Text.txt");
        fileOutputStream.write(2);
//BYTE BUFFER
        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream("Text.txt", true));
        BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream("Text.txt"), bufferSizeOptional);
        DataOutputStream dataOutputStream = new DataOutputStream(new FileOutputStream("Text.txt"));
        dataOutputStream.writeUTF("123");





        InputStreamReader inputStreamReader = new InputStreamReader(new FileInputStream("Text.txt"));
        OutputStreamWriter outputStreamWriter = new OutputStreamWriter(new FileOutputStream("Text.txt"));

        byte[] bytes = "new co".getBytes();
        bufferedOutputStream.write(bytes);
        bufferedOutputStream.close();



//CHAR
        String a = Files.readAllLines(of).toString();
        FileReader fileReader = new FileReader("Text.txt");
        FileWriter fileWriter = new FileWriter("Text.txt");

        Scanner scan = new Scanner(fileReader);        //FileReader Only with sacnner!!!!!!!
        fileWriter.write("asd");
//BUFFER
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);


        bufferedReader.readLine();
        bufferedWriter.write("AS");
        bufferedWriter.close();
//Faster way

        Files.readAllLines(of);
        String j = Files.readString(of);
        Files.write(of, new byte[]{1}, StandardOpenOption.APPEND);
        Files.writeString(of, "asd");


        System.out.println(a);


    }

    public static void maina(String[] args) { //Stream
//        List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);
//        List<String> squaresList = numbers.stream()
//                .distinct()
//                .map(i -> i*i+"i")
//                .collect(Collectors.toList());
//        squaresList.forEach(System.out::print);
//
//
//        List<Integer> numberss = Arrays.asList(3, 2, 2, 3, 7, 3, 5);
//        Integer ageSum = numberss.stream()
//                .distinct()
//                .reduce(0, (sum, p) -> sum + p);
//        System.out.println("\nageSum = " + ageSum);
//        long startTime = System.currentTimeMillis(); // from 1.01.1970 00:00.0
//        List<Integer> numbers = new Random().ints()
//                .limit(2000000)
//                .distinct()
//                .boxed()
//                .collect(Collectors.toList());
//        //
//        Integer ageSum = numbers.stream()
////                Integer ageSum = numbers.parallelStream()
//                .sorted()
//                .reduce(0, (sum, p) -> sum += p);
//        long endTime = System.currentTimeMillis();
//        System.out.printf("\nageSum = " + ageSum
//                + "\ntime = %.3f", ((endTime - startTime) / 1000.0));

//        List<String> list = Arrays.asList("Start", "Ok", "Third", "Ok");
//        Map<String, Integer> result =
//                list.stream().collect(Collectors.toMap(Function.identity(), String::length,
//                        (item, ite) -> item));
//        System.out.println(result);


        IntStream.range(0, 10)
                .filter(x -> x % 4 == 0).forEach(System.out::println);

    }

    public static void main(String[] args) {
        System.out.println(ANSI_PURPLE + "Main"); //1

        Thread thread = new MyThread(); //2
        thread.start();

        Thread newThread = new Thread(() -> System.out.println(ANSI_GREEN + "Anonymous")); //3
        newThread.start();

        Thread myRunnableThread = new Thread(new MyRunnable()); //4
        myRunnableThread.start();

//        myRunnableThread.interrupt();

        //Virtual

        try {
            myRunnableThread.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        Thread myNewRunnableThread = new Thread(() -> System.out.println(ANSI_RED + "new Runnable"));//5
        myNewRunnableThread.start();


        System.out.println(ANSI_PURPLE + "Main2");
        // 1 - 2 - 3 - 5 - 4
        //1 - 5 - 2
        //1 - 5 - 4
        //1 - 5 - 3
    }









    static class TestJoinMethod1 extends Thread {
        public void run() {
            for (int i = 1; i <= 5; i++) {
                try {
                    Thread.sleep(500);
                } catch (Exception e) {
                    System.out.println(e);
                }
                System.out.println(i + currentThread().getName());
            }
        }

        public static void main(String[] args) {
            TestJoinMethod1 t1 = new TestJoinMethod1();
            TestJoinMethod1 t2 = new TestJoinMethod1();
            TestJoinMethod1 t3 = new TestJoinMethod1();
            t1.start();

            try {
                t1.join();
                System.out.println(currentThread().getName());
            } catch (Exception e) {
                System.out.println(e);
            }
            t2.start();
            t3.start();


        }
    }

    public static void eval(List<Integer> list, Predicate<Integer> predicate) {
        for (Integer n : list) {
            if (predicate.test(n)) {
                System.out.println(n + " ");
            }
        }
    }


}


class Aain {

    public static void main(String[] args) {
        Message message = new Message();
        (new Thread(new Writer(message))).start();
        (new Thread(new Reader(message))).start();
    }
}

class Message {
    private String message;
    private boolean empty = true;

    public synchronized String read() {
        while (empty) {
            try {
                wait();
            } catch (InterruptedException e) {

            }

        }
        empty = true;
        notifyAll();
        return message;
    }

    public synchronized void write(String message) {
        while (!empty) {
            try {
                wait();
            } catch (InterruptedException e) {

            }

        }
        empty = false;
        this.message = message;
        notifyAll();
    }
}

class Writer implements Runnable {
    private Message message;

    public Writer(Message message) {
        this.message = message;
    }

    public void run() {
        String messages[] = {
                "Humpty Dumpty sat on a wall",
                "Humpty Dumpty had a great fall",
                "All the king's horses and all the king's men",
                "Couldn't put Humpty together again"
        };

        Random random = new Random();

        for (int i = 0; i < messages.length; i++) {
            message.write(messages[i]);
            try {
                Thread.sleep(random.nextInt(2000));
            } catch (InterruptedException e) {

            }
        }
        message.write("Finished");
    }
}

class Reader implements Runnable {
    private Message message;

    public Reader(Message message) {
        this.message = message;
    }

    public void run() {
        Random random = new Random();
        for (String latestMessage = message.read(); !latestMessage.equals("Finished");
             latestMessage = message.read()) {
            System.out.println(latestMessage);
            try {
                Thread.sleep(random.nextInt(2000));
            } catch (InterruptedException e) {

            }
        }
    }

}
















